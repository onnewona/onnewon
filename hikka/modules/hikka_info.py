# ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ    ‚ñÑ‚ñÄ‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñÑ‚ñÄ‚ñà
# ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà ‚ñÑ  ‚ñà‚ñÄ‚ñà  ‚ñà  ‚ñà‚ñÄ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñÄ‚ñà
#
#              ¬© Copyright 2022
#
#          https://t.me/hikariatama
#
# üîí Licensed under the GNU GPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# scope: inline

import logging

import git
from telethon.tl.types import Message
from telethon.utils import get_display_name

from .. import loader, main, utils
from ..inline.types import InlineQuery

logger = logging.getLogger(__name__)


@loader.tds
class HikkaInfoMod(loader.Module):
    """Show userbot info"""

    strings = {
        "name": "HikkaInfo",
        "owner": "Owner",
        "version": "Version",
        "build": "Build",
        "prefix": "Prefix",
        "send_info": "Send userbot info",
        "description": "‚Ñπ This will not compromise any sensitive info",
        "up-to-date": "üòå Up-to-date",
        "update_required": "üòï Update required </b><code>.update</code><b>",
        "_cfg_cst_msg": "Custom message for info. May contain {me}, {version}, {build}, {prefix}, {platform} keywords",
        "_cfg_cst_btn": "Custom button for info. Leave empty to remove button",
        "_cfg_banner": "Set `True` in order to disable an image banner",
    }

    strings_ru = {
        "owner": "–í–ª–∞–¥–µ–ª–µ—Ü",
        "version": "–í–µ—Ä—Å–∏—è",
        "build": "–°–±–æ—Ä–∫–∞",
        "prefix": "–ü—Ä–µ—Ñ–∏–∫—Å",
        "send_info": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–±–æ—Ç–µ",
        "description": "‚Ñπ –≠—Ç–æ –Ω–µ —Ä–∞—Å–∫—Ä–æ–µ—Ç –Ω–∏–∫–∞–∫–æ–π –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "_ihandle_doc_info": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–±–æ—Ç–µ",
        "up-to-date": "üòå –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è",
        "update_required": "üòï –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ </b><code>.update</code><b>",
        "_cfg_cst_msg": "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ info. –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ {me}, {version}, {build}, {prefix}, {platform}",
        "_cfg_cst_btn": "–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ info. –û—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É",
        "_cfg_banner": "–ü–æ—Å—Ç–∞–≤—å `True`, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –±–∞–Ω–Ω–µ—Ä-–∫–∞—Ä—Ç–∏–Ω–∫—É",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "custom_message",
                doc=lambda: self.strings("_cfg_cst_msg"),
            ),
            loader.ConfigValue(
                "custom_button",
                ["üèôÔ∏è Sosi ! Administration", "https://t.me/netuzb"],
                lambda: self.strings("_cfg_cst_btn"),
                validator=loader.validators.Series(fixed_len=2),
            ),
            loader.ConfigValue(
                "disable_banner",
                False,
                lambda: self.strings("_cfg_banner"),
                validator=loader.validators.Boolean(),
            ),
        )

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self._me = await client.get_me()

    def _render_info(self) -> str:
        ver = utils.get_git_hash() or "Unknown"

        try:
            repo = git.Repo()
            diff = repo.git.log(["HEAD..origin/master", "--oneline"])
            upd = (
                self.strings("update_required") if diff else self.strings("up-to-date")
            )
        except Exception:
            upd = ""

        me = f'<b><a href="tg://user?id={self._me.id}">{utils.escape_html(get_display_name(self._me))}</a></b>'
        version = f'<i>{".".join(list(map(str, list(main.__version__))))}</i>'
        build = f'<a href="https://github.com/Netuzb/sosi/commit/{ver}">#{ver[:8]}</a>'  # fmt: skip
        prefix = f"‚Ä¢<code>{utils.escape_html(self.get_prefix())}</code>‚Ä¢"
        platform = utils.get_named_platform()

        return (
            "<b>üåá Sosi</b>\n"
            + self.config["custom_message"].format(
                me=me,
                version=version,
                build=build,
                prefix=prefix,
                platform=platform,
            )
            if self.config["custom_message"] and self.config["custom_message"] != "no"
            else (
                "<b>üåá Sosi-Userbot</b>\n"
                f'<b>üåâ {self.strings("owner")}: </b>{me}\n\n'
                f"<b>üåâ {self.strings('version')}: </b>{version} {build}\n"
                f"<b>{upd}</b>\n\n"
                f"<a href='{self.strings('prefix')} {prefix}'></a>\n"
                f"<a href='{platform}'></a>\n"
            )
        )

    def _get_mark(self):
        return (
            None
            if not self.config["custom_button"]
            else {
                "text": self.config["custom_button"][0],
                "url": self.config["custom_button"][1],
            }
        )

    @loader.inline_everyone
    async def info_inline_handler(self, query: InlineQuery) -> dict:
        """Send userbot info"""

        return {
            "title": self.strings("send_info"),
            "description": self.strings("description"),
            "message": self._render_info(),
            "thumb": "https://i.imgur.com/sYULuO1.jpeg",
            "reply_markup": self._get_mark(),
        }

    @loader.unrestricted
    async def infocmd(self, message: Message):
        """Send userbot info"""
        await self.inline.form(
            message=message,
            text=self._render_info(),
            reply_markup=self._get_mark(),
            **(
                {"photo": "https://i.imgur.com/XYNawuK.jpeg"}
                if not self.config["disable_banner"]
                else {}
            ),
        )

    @loader.unrestricted
    async def sosicmd(self, message: Message):
        """[en/ru - default en] - Send info aka 'What is Hikka?'"""
        args = utils.get_args_raw(message)
        args = args if args in {"en", "ru"} else "en"

        await utils.answer(
            message,
            (
                "üåò <b>sosi</b>\n\n"
                "Brand new userbot for Telegram with a lot of features, "
                "aka InlineGalleries, forms etc. Userbot - software, running "
                "on your Telegram account. If you write a command to any chat, it will "
                "get executed right there. Check out live examples at "
                '<a href="https://github.com/hikariatama/Hikka">GitHub</a>'
            )
            if args == "en"
            else (
                "üåò <b>sosi</b>\n\n"
                "–ù–æ–≤—ã–π —é–∑–µ—Ä–±–æ—Ç –¥–ª—è Telegram —Å –æ–≥—Ä–æ–º–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π, "
                "–∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö: –ò–Ω–ª–∞–π–Ω –≥–∞–ª–µ—Ä–µ–∏, —Ñ–æ—Ä–º—ã –∏ –¥—Ä—É–≥–æ–µ. –Æ–∑–µ—Ä–±–æ—Ç - –ø—Ä–æ–≥—Ä–∞–º–º–∞, "
                "–∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ —Ç–≤–æ–µ–º Telegram-–∞–∫–∫–∞—É–Ω—Ç–µ. –ö–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å "
                "–∫–æ–º–∞–Ω–¥—É –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –æ–Ω–∞ —Å—Ä–∞–∑—É –∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ "
                '–Ω–∞ –∂–∏–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ <a href="https://github.com/hikariatama/Hikka">GitHub</a>'
            ),
        )
