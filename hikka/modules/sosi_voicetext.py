from .. import loader, utils
from telethon import events
from time import time
import os
try:
    import speech_recognition as sr
    from pydub import AudioSegment
except:
    os.popen('python3 -m pip install pydub speech_recognition --upgrade').read()
    import speech_recognition as sr
    from pydub import AudioSegment

import asyncio
# requires: pydub speechrecognition


@loader.tds
class VoiceToTextMod(loader.Module):
    strings = {"name": "VoiceToText",
    'converting': '<code>üåâ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</code>',
    'converted': '<b>–¢–µ–∫—Å—Ç —ç—Ç–æ–≥–æ –≤–æ–π—Å–∞:</b>\n<pre>{}</pre>',
    'no_ffmpeg': '<b>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ffmpeg.</b> <a href="https://t.me/ftgchatru/454189">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>',
    'voice_not_found': 'üåâ <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>',
    'autovoice_off': "<b>üåâ –Ø –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
    'autovoice_on': "<b>üåâ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>"}

    async def client_ready(self, client, db):
        self.db = db
        self.chats = self.db.get('vtt', 'chats', [])

    async def recognize(self, event):
        try:
            filename = "/tmp/" + str(time()).replace('.', '')
            await event.download_media(file=filename + '.ogg')
            song = AudioSegment.from_ogg(filename + '.ogg')
            song.export(filename + '.wav', format="wav")
            event = await utils.answer(event, self.strings('converting', event))
            try:
                event = event[0]
            except:
                pass
            r = sr.Recognizer()
            with sr.AudioFile(filename + '.wav') as source:
                audio_data = r.record(source)
                text = r.recognize_google(audio_data, language='ru-RU')
                await utils.answer(event, self.strings('converted', event).format(text))
        except Exception as e:
            if 'ffprobe' in str(e):
                await utils.answer(event, self.strings('no_ffmpeg', event))
            else:
                await event.delete()

    @loader.owner
    async def vttcmd(self, message):
        """.vtt - –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º."""
        reply = await message.get_reply_message()
        if not reply or not reply.media or not reply.media.document.attributes[0].voice:
            await utils.answer(message, self.strings('voice_not_found', message))
            await asyncio.sleep(2)
            await message.delete()
            return

        await self.recognize(reply)
        await message.delete()

    @loader.owner
    async def watcher(self, event):
        chat_id = utils.get_chat_id(event)
        if chat_id not in self.chats:
            return

        try:
            if not event.media or not event.media.document.attributes[0].voice:
                return
        except:
            return

        await self.recognize(event)

    async def autovttcmd(self, message):
        """.autovtt - –ù–∞–ø–∏—à–∏ —ç—Ç–æ –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –≤ –Ω–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ç–µ–∫—Å—Ç–æ–º. –ï—Å–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ç–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ."""
        chat_id = utils.get_chat_id(message)
        if chat_id in self.chats:
            self.chats.remove(chat_id)
            await utils.answer(message, self.strings('autovoice_off'))
        else:
            self.chats.append(chat_id)
            await utils.answer(message, self.strings('autovoice_on'))

        self.db.set('vtt', 'chats', self.chats)